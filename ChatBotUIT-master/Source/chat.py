from ollama import chat
from retriever import Retriever
from smooth_context import smooth_contexts
from data_loader import load_meta_corpus
from typing import List, Dict
from openai import OpenAI

from dotenv import load_dotenv
import os
import sys

load_dotenv()

API_OPENAI_KEY = os.getenv("api_openai_key")

client = OpenAI(api_key=API_OPENAI_KEY)

prompt_template = (
    """###Y√™u c·∫ßu: B·∫°n l√† m·ªôt tr·ª£ l√Ω h·ªó tr·ª£ v·ªÅ h·ªçc v·ª• th√¥ng minh c·ªßa Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá Th√¥ng Tin, chuy√™n cung c·∫•p c√¢u tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin ƒë∆∞·ª£c truy xu·∫•t t·ª´ h·ªá th·ªëng v·ªÅ h·ªçc v·ª• c·ªßa Tr∆∞·ªùng. Khi nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu truy xu·∫•t t·ª´ RAG, h√£y:  

    1. Ph√¢n t√≠ch d·ªØ li·ªáu ƒë·ªÉ tr·∫£ l·ªùi ƒë√∫ng tr·ªçng t√¢m c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng. Ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p, kh√¥ng suy ƒëo√°n ho·∫∑c t·∫°o ra th√¥ng tin m·ªõi.
    2. T√≥m t·∫Øt th√¥ng tin m·ªôt c√°ch r√µ r√†ng, ng·∫Øn g·ªçn nh∆∞ng v·∫´n ƒë·∫ßy ƒë·ªß √Ω nghƒ©a.  
    3. Tr·∫£ l·ªùi v·ªõi gi·ªçng ƒëi·ªáu th√¢n thi·ªán v√† d·ªÖ ti·∫øp c·∫≠n.  
    4. N·∫øu d·ªØ li·ªáu truy xu·∫•t kh√¥ng c√≥ th√¥ng tin li√™n quan ƒë·∫øn c√¢u h·ªèi ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c truy xu·∫•t, h√£y tr·∫£ l·ªùi: "Xin l·ªói, t√¥i kh√¥ng c√≥ th√¥ng tin ph√π h·ª£p ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y."  
    5. N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ h·ªçc v·ª• c·ªßa Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá Th√¥ng Tin (out domain) h√£y gi·ªõi thi·ªáu l·ªãch s·ª± v·ªÅ lƒ©nh v·ª±c c·ªßa m√¨nh.
    6. Tr·∫£ l·ªùi c√¢u h·ªèi b·∫±ng ng√¥n ng·ªØ: {language}

    ###D·ª±a v√†o m·ªôt s·ªë ng·ªØ c·∫£nh truy xu·∫•t ƒë∆∞·ª£c d∆∞·ªõi ƒë√¢y n·∫øu b·∫°n th·∫•y n√≥ c√≥ li√™n quan ƒë·∫øn c√¢u h·ªèi th√¨ tr·∫£ l·ªùi c√¢u h·ªèi ·ªü cu·ªëi. {input}
    ###C√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng: {question}
    ###N·∫øu th·∫•y ng·ªØ c·∫£nh c√≥ li√™n quan ƒë·∫øn c√¢u h·ªèi h√£y tr·∫£ l·ªùi chi ti·∫øt v√† ƒë·∫ßy ƒë·ªß d·ª±a tr√™n ng·ªØ c·∫£nh."""
    
)

def get_prompt(question, contexts, language):
    context = "\n\n".join([f"Context [{i+1}]: {x['passage']}" for i, x in enumerate(contexts)])
    input = f"\n\n{context}\n\n"
    prompt = prompt_template.format(
        input=input,
        question=question, 
        language=language
    )
    return prompt


def classify_small_talk(input_sentence, language):
    prompt = f"""
    ### M·ª•c ti√™u
    B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o chuy√™n v·ªÅ **t∆∞ v·∫•n h·ªçc v·ª•** c·ªßa Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá Th√¥ng Tin. Nhi·ªám v·ª• c·ªßa b·∫°n l√† **ph√¢n lo·∫°i** m·ªói c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng th√†nh hai lo·∫°i:

    1. **Small talk**: c√°c c√¢u ch√†o h·ªèi, h·ªèi thƒÉm, c·∫£m ∆°n, khen ng·ª£i, hay h·ªèi th√¥ng tin c√° nh√¢n‚Ä¶ **KH√îNG li√™n quan** ƒë·∫øn h·ªçc v·ª•.  
    2. **Domain question**: c√°c c√¢u h·ªèi **li√™n quan** tr·ª±c ti·∫øp ƒë·∫øn h·ªçc v·ª• (v√≠ d·ª•: ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o, h·ªçc ph√≠, t√≠n ch·ªâ, l·ªãch thi, quy ƒë·ªãnh‚Ä¶)

    ### Quy t·∫Øc tr·∫£ l·ªùi
    - N·∫øu l√† **Domain question**, ch·ªâ tr·∫£ v·ªÅ **ch√≠nh x√°c** t·ª´ **"no"** (kh√¥ng th√™m b·∫•t k·ª≥ k√Ω t·ª±, c√¢u gi·∫£i th√≠ch n√†o).  
    - N·∫øu l√† **Small talk**, kh√¥ng tr·∫£ ‚Äúno‚Äù m√† tr·∫£ v·ªÅ m·ªôt th√¥ng ƒëi·ªáp ch√†o m·ªùi ng·∫Øn g·ªçn, chuy√™n nghi·ªáp, th√¢n thi·ªán, gi·ªõi thi·ªáu v·ªÅ chatbot t∆∞ v·∫•n h·ªçc v·ª• Tr∆∞·ªùng ƒêH CNTT, b·∫±ng ng√¥n ng·ªØ {language}.

    ### V√≠ d·ª• minh h·ªça

    User query: "Ch√†o b·∫°n, h√¥m nay b·∫°n th·∫ø n√†o?"  
    Response: "Xin ch√†o! M√¨nh l√† chatbot t∆∞ v·∫•n h·ªçc v·ª• Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá Th√¥ng Tin‚Äîs·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi m·ªçi th·∫Øc m·∫Øc v·ªÅ ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o, h·ªçc ph√≠ v√† h·ªçc ph·∫ßn. H√£y cho m√¨nh bi·∫øt c√¢u h·ªèi c·ªßa b·∫°n nh√©! üòä"

    User query: "ƒêi·ªÉm s·ªë ƒë·ªÉ mi·ªÖn Anh VƒÉn 2 l√† bao nhi√™u?"  
    Response: "no"

    User query: "B·∫°n t√™n l√† g√¨?"  
    Response: "Xin ch√†o! M√¨nh l√† chatbot t∆∞ v·∫•n h·ªçc v·ª• Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá Th√¥ng Tin‚Äîs·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi m·ªçi th·∫Øc m·∫Øc v·ªÅ ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o, l·ªãch thi, h·ªçc ph√≠ v√† h·ªçc ph·∫ßn. H√£y cho m√¨nh bi·∫øt c√¢u h·ªèi h·ªçc v·ª• c·ªßa b·∫°n nh√©! üòä"

    User query: "Ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn l√† g√¨?"  
    Response: "no"

    User query: "C·∫£m ∆°n!"  
    Response: "C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng! M√¨nh l√† chatbot t∆∞ v·∫•n h·ªçc v·ª• Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá Th√¥ng Tin‚Äîlu√¥n s·∫µn s√†ng gi·∫£i ƒë√°p m·ªçi th·∫Øc m·∫Øc li√™n quan ƒë·∫øn ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o, t√≠n ch·ªâ v√† h·ªçc ph·∫ßn. H√£y h·ªèi m√¨nh b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ h·ªçc v·ª• nh√©! üòä"

    ### Th·ª±c thi ph√¢n lo·∫°i
    D·ª±a v√†o c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng, th·ª±c hi·ªán ƒë√∫ng quy t·∫Øc tr√™n.  
    C√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng: {input_sentence}
    """


    completion = client.chat.completions.create(
      model="gpt-4o-mini",
      messages=[
        {"role": "user", "content": prompt}
      ]
    )
    answer = completion.choices[0].message.content
    return answer.strip().lower()

def create_new_prompt(prompt, chat_history, user_query, **kwargs):
  new_prompt = f"{prompt} l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán: {chat_history} c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: {user_query}"
  for key, value in kwargs.items():
    new_prompt += f" {key}: {value}"

  return new_prompt

def chatbot(conversation_history: List[Dict[str, str]], language) -> str:
    user_query = conversation_history[-1]['content']

    meta_corpus = load_meta_corpus(r"ChatBotUIT-master\data\corpus_chunks.jsonl")
    # for doc in meta_corpus:
    #     if "passage" not in doc:
    #         doc["passage"] = doc.get("context", "")


    retriever = Retriever(
        corpus=meta_corpus,
        corpus_emb_path=r"ChatBotUIT-master\data\corpus_embedding.pkl",
        model_name="ChatBotUIT-master\model\model_embedding"
    )

    # X·ª≠ l√Ω n·∫øu ng∆∞·ªùi d√πng c√≥ c√¢u h·ªèi nh·ªè ho·∫∑c tr√≤ chuy·ªán phi·∫øm
    result = classify_small_talk(user_query, language)
    print("result classify small talk:", result)
    if "no" not in result:
        return result

    elif "no" in result:
        prompt = """D·ª±a tr√™n l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán v√† c√¢u h·ªèi m·ªõi nh·∫•t c·ªßa ng∆∞·ªùi d√πng, c√≥ th·ªÉ tham chi·∫øu ƒë·∫øn ng·ªØ c·∫£nh trong l·ªãch s·ª≠ tr√≤ chuy·ªán, 
            h√£y t·∫°o th√†nh m·ªôt c√¢u h·ªèi ƒë·ªôc l·∫≠p c√≥ th·ªÉ hi·ªÉu ƒë∆∞·ª£c m√† kh√¥ng c·∫ßn l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán. 
            KH√îNG tr·∫£ l·ªùi c√¢u h·ªèi, ch·ªâ c·∫ßn ƒëi·ªÅu ch·ªânh l·∫°i n·∫øu c·∫ßn, n·∫øu kh√¥ng th√¨ gi·ªØ nguy√™n. 
            N·∫øu c√¢u h·ªèi b·∫±ng ti·∫øng Anh, sau khi tinh ch·ªânh, h√£y d·ªãch c√¢u h·ªèi ƒë√≥ sang ti·∫øng Vi·ªát."""

        # S·ª≠ d·ª•ng h√†m t·∫°o c√¢u h·ªèi m·ªõi t·ª´ l·ªãch s·ª≠ tr√≤ chuy·ªán
        new_prompt = create_new_prompt(
            prompt=prompt,
            chat_history=conversation_history,
            user_query=user_query,
        )

        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "user", "content": new_prompt}
            ]
        )

        answer = completion.choices[0].message.content
        print("C√¢u h·ªèi m·ªõi: ", answer)
        question = answer
        top_passages = retriever.retrieve(question, topk=10)
        for doc in top_passages:
            if "passage" not in doc:
                doc["passage"] = doc.get("context", "")

        print("topK:", top_passages)
        smoothed_contexts = smooth_contexts(top_passages, meta_corpus)
        print("Smooth context: ", smoothed_contexts)
        prompt = get_prompt(question, smoothed_contexts, language)
    
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )

        answer = completion.choices[0].message.content
        
        return answer

    else:
        print("Unexpected response from the model.")
        return "Xin l·ªói, h·ªá th·ªëng kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c."
    
# def main():
#     # Nh·∫≠n input t·ª´ ng∆∞·ªùi d√πng
#     user_query = input("User query: ")

#     result = chatbot(user_query)

#     # Tr·∫£ v·ªÅ output
#     print(result)

# if __name__ == "__main__":
#     main()
